name: Build and Push Docker Image password recovery

on:
  push:
    paths:
      - 'Backend_uceShoes/Authentication_and_Authorization/password_recovery/**'
    branches:
      - TestConectionUser
  pull_request:
    paths:
      - 'Backend_uceShoes/Authentication_and_Authorization/password_recovery/**'
    branches: [ "QA", "main" ]

jobs:
  build-and-deploy:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD_P }}" | docker login -u "${{ secrets.DOCKER_USERNAME_P }}" --password-stdin

      - name: üì¶ Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME_P }}/uceshoes-password-recovery:latest \
            -f Backend_uceShoes/Authentication_and_Authorization/password_recovery/Dockerfile \
            Backend_uceShoes/Authentication_and_Authorization/password_recovery

          docker push ${{ secrets.DOCKER_USERNAME_P }}/uceshoes-password-recovery:latest
  deploy:
    name: Deploy to AWS EC2
    needs: build-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Connect to AWS EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST_PASSWORD_RECOVERY }}
          username: ${{ secrets.EC2_USER_P }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY_P }}
          script: |
            # üîß Actualizar paquetes e instalar Docker si no est√° instalado
            # Amazon Linux a veces no tiene Docker preinstalado, por lo que lo aseguramos aqu√≠.
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker

            # üîß Asegurar que el usuario tenga permisos para ejecutar Docker sin sudo
            sudo usermod -aG docker $USER
            newgrp docker

            # üõë Detener el contenedor anterior si est√° corriendo
            # Se usa '|| true' para evitar que falle si no existe.
            sudo docker stop uceshoes-password-recovery || true

            # üóëÔ∏è Eliminar el contenedor anterior para evitar conflictos
            sudo docker rm uceshoes-password-recovery || true

            # üõë CORRECCI√ìN: Se corrigi√≥ el error en `docker pull`
            sudo docker pull ${{ secrets.DOCKER_USERNAME_P }}/uceshoes-password-recovery:latest

            # üöÄ Ejecutar el nuevo contenedor con opci√≥n de reinicio autom√°tico
            # Se agreg√≥ `--restart unless-stopped` para que el contenedor no se detenga si falla.
            sudo docker run -d \
              --name uceshoes-password-recovery \
              -p 3012:3012 \
              -e DB_HOST=${{ secrets.DB_HOST_P }} \
              -e DB_USER=${{ secrets.DB_USER_P }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD_P }} \
              -e DB_NAME=${{ secrets.DB_NAME_P }} \
              -e DB_DIALECT=${{ secrets.DB_DIALECT_P }} \
              -e MAIL_HOST=${{ secrets.MAIL_HOST }}\
              -e MAIL_PORT=${{ secrets.MAIL_PORT }}\
              -e MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}\
              -e MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}\
              -e MAIL_SMTP_AUTH=${{ secrets.MAIL_SMTP_AUTH }}\
              -e MAIL_STARTTLS=${{ secrets.MAIL_STARTTLS }}\
              -e ORIGIN_FRONT=${{ secrets.ORIGIN_FRONT}}\
              -e SERVER_PORT_RECOVERY_PASSWORD=${{ secrets.SERVER_PORT_RECOVERY_PASSWORD }} \
              ${{ secrets.DOCKER_USERNAME_P }}/uceshoes-password-recovery:latest