name: üöÄ Deploy API Gateway to AWS

on:
  push:
    paths:
      - 'api-gateway/**'
    branches:
      - TestConectionProducts

jobs:
  build-and-deploy:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üì¶ Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest \
            -f api-gateway/Dockerfile api-gateway/
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: üöÄ Connect to EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_API_GATEWAY }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "üîç Checking if Docker is installed..."
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo usermod -a -G docker $USER
            fi

            echo "üõë Stopping and removing previous container..."
            sudo docker stop api-gateway || true
            sudo docker rm api-gateway || true

            echo "üì• Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

            echo "üöÄ Running the new container..."
            sudo docker run -d \
              --name api-gateway \
              -p ${{ secrets.SERVER_PORT_API_GATEWAY }}:${{ secrets.SERVER_PORT_API_GATEWAY }} \
              -e PORT=${{ secrets.SERVER_PORT_API_GATEWAY }} \
              -e EC2_HOST_PRODUCT_CREATE=${{ secrets.EC2_HOST_PRODUCT_CREATE }} \
              -e SERVER_PORT_CREATE_PRODUCT=${{ secrets.SERVER_PORT_CREATE_PRODUCT }} \
              -e EC2_HOST_PRODUCT_DELETE=${{ secrets.EC2_HOST_PRODUCT_DELETE }} \
              -e SERVER_PORT_DELETE_PRODUCT=${{ secrets.SERVER_PORT_DELETE_PRODUCT }} \
              -e EC2_HOST_PRODUCT_GETALL=${{ secrets.EC2_HOST_PRODUCT_GETALL }} \
              -e SERVER_PORT_GET_ALL_PRODUCTS=${{ secrets.SERVER_PORT_GET_ALL_PRODUCTS }} \
              -e EC2_HOST_PRODUCT_GETBYID=${{ secrets.EC2_HOST_PRODUCT_GETBYID }} \
              -e SERVER_PORT_GET_PRODUCT_BY_ID=${{ secrets.SERVER_PORT_GET_PRODUCT_BY_ID }} \
              -e EC2_HOST_PRODUCT_UPDATE=${{ secrets.EC2_HOST_PRODUCT_UPDATE }} \
              -e SERVER_PORT_UPDATE_PRODUCT=${{ secrets.SERVER_PORT_UPDATE_PRODUCT }} \
              -e EC2_HOST_CREATE_CATEGORY=${{ secrets.EC2_HOST_CREATE_CATEGORY }} \
              -e SERVER_PORT_CREATE_CATEGORY=${{ secrets.SERVER_PORT_CREATE_CATEGORY }} \
              -e EC2_HOST_DELETE_CATEGORY=${{ secrets.EC2_HOST_DELETE_CATEGORY }} \
              -e SERVER_PORT_DELETE_CATEGORY=${{ secrets.SERVER_PORT_DELETE_CATEGORY }} \
              -e EC2_HOST_GET_ALL_CATEGORIES=${{ secrets.EC2_HOST_GET_ALL_CATEGORIES }} \
              -e SERVER_PORT_GET_ALL_CATEGORIES=${{ secrets.SERVER_PORT_GET_ALL_CATEGORIES }} \
              -e EC2_HOST_GET_CATEGORY_BY_ID=${{ secrets.EC2_HOST_GET_CATEGORY_BY_ID }} \
              -e SERVER_PORT_GET_CATEGORY_BY_ID=${{ secrets.SERVER_PORT_GET_CATEGORY_BY_ID }} \
              -e EC2_HOST_UPDATE_CATEGORY=${{ secrets.EC2_HOST_UPDATE_CATEGORY }} \
              -e SERVER_PORT_UPDATE_CATEGORY=${{ secrets.SERVER_PORT_UPDATE_CATEGORY }} \
              -e EC2_HOST_GRAPHQL=${{ secrets.EC2_HOST_GRAPHQL }} \
              -e SERVER_PORT_GRAPHQL=${{ secrets.SERVER_PORT_GRAPHQL }} \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest

            echo "üîç Verifying deployment..."
            if sudo docker ps -f name=api-gateway | grep api-gateway; then
              echo "‚úÖ Deployment successful: API Gateway is running."
            else
              echo "‚ùå Deployment failed: Check logs for errors."
              exit 1
            fi