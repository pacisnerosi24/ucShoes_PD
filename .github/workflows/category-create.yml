name: üöÄ Deploy Category Create Service to AWS

on:
  push:
    paths:
      - 'Backend_uceShoes/productManagement/productCreation/Category/createCategory/**'
    branches:
      - TestConectionProducts

jobs:
  build-and-push:
    name: üì¶ Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üõ†Ô∏è Checkout repository
        uses: actions/checkout@v4

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üì¶ Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/category-create:latest \
            --build-arg PORT=${{ secrets.SERVER_PORT_CREATE_CATEGORY }} \
            -f Backend_uceShoes/productManagement/productCreation/Category/createCategory/Dockerfile \
            Backend_uceShoes/productManagement/productCreation/Category/createCategory

          docker push ${{ secrets.DOCKER_USERNAME }}/category-create:latest

  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: üöÄ Connect to EC2 and Deploy Category Create Service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_CREATE_CATEGORY }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "üîç Checking if Docker is installed..."
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo usermod -a -G docker $USER
            fi

            echo "üõë Stopping and removing previous container..."
            sudo docker stop category-create || true
            sudo docker rm category-create || true

            echo "üßπ Removing old Docker images..."
            sudo docker image prune -af

            echo "üì• Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/category-create:latest

            echo "üîç Verifying database connection before running the container..."
            if ! nc -zv ${{ secrets.POSTGRES_HOST }} ${{ secrets.POSTGRES_PORT }}; then
              echo "‚ùå Database connection failed. Deployment aborted."
              exit 1
            fi

            echo "üîç Verifying environment variables:"
            echo "PORT=${{ secrets.SERVER_PORT_CREATE_CATEGORY }}"
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}"
            echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}"
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
            echo "DB_DIALECT=postgres"

            echo "üöÄ Running the new container..."
            sudo docker run -d \
              --name category-create \
              -p ${{ secrets.SERVER_PORT_CREATE_CATEGORY }}:${{ secrets.SERVER_PORT_CREATE_CATEGORY }} \
              -e PORT=${{ secrets.SERVER_PORT_CREATE_CATEGORY }} \
              -e POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
              -e POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
              -e DB_DIALECT=postgres \
              ${{ secrets.DOCKER_USERNAME }}/category-create:latest

            echo "üîç Verifying deployment..."
            if [ "$(sudo docker ps -q -f name=category-create)" ]; then
              echo "‚úÖ Deployment successful: Category Create Service is running."
            else
              echo "‚ùå Deployment failed: Checking logs..."
              sudo docker logs category-create > deployment_logs.txt
              cat deployment_logs.txt
              echo "‚ö†Ô∏è Checking Docker container status..."
              sudo docker ps -a
              exit 1
            fi